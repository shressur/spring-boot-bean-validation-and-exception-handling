package com.example.springbootexceptionhandling.service;

import com.example.springbootexceptionhandling.entity.Customer;
import com.example.springbootexceptionhandling.exception.CustomerNotFoundException;
import com.example.springbootexceptionhandling.exception.EmailAlreadyExistsException;
import com.example.springbootexceptionhandling.repository.CustomerRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;


@AllArgsConstructor //constructor injection (better/preferred)
@Service
public class CustomerService {
    private final CustomerRepository customerRepository; //constructor injection, no @Autowired (field injection)

    //Create
    public Customer saveCustomer(Customer newCustomer) throws EmailAlreadyExistsException {
        //save and return
        Optional<Customer> customerByEmail = customerRepository.findByEmailId(newCustomer.getEmailId());

        if(customerByEmail.isPresent()){
            throw new EmailAlreadyExistsException("Email already registered");
        }

        return customerRepository.save(newCustomer);
    }

    //Read one
    public Customer getSingleCustomer(int customerId) throws CustomerNotFoundException {
        return customerRepository.findById(customerId)
                .orElseThrow(()-> new CustomerNotFoundException("Customer with id " + customerId + " does not exist!"));
    }
    //Read all
    public List<Customer> getAllCustomers(){
        return customerRepository.findAll();
    }

    //Update
    public Customer updateCustomer(Customer newCustomer)  throws EmailAlreadyExistsException {
        //validating unique email
        Optional<Customer> customerByEmail = customerRepository
                .findByEmailId(newCustomer.getEmailId());
        if(customerByEmail.isPresent() && customerByEmail.get().getCustomerId() != newCustomer.getCustomerId()){
            throw new EmailAlreadyExistsException("Email already registered");
        }
        //if unique email and unique id create new resource else update resource (newCustomer's id will be replaced by autogenerated id on resource creation)
        return customerRepository.save(newCustomer);
    }

    //Delete
    public void deleteCustomer(int customerId) throws CustomerNotFoundException{
        Optional<Customer> customerById = customerRepository.findById(customerId);
        if(customerById.isEmpty()){
            throw new CustomerNotFoundException("Customer with id " + customerId + " does not exist!");
        }
        customerRepository.deleteById(customerId);
    }


}

//Exceptions are delegated to the controller and controller throws the exception and is handled in ExceptionAdvice class